{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\gabtn\\\\OneDrive\\\\Bureau\\\\react-redux-todo-list-master\\\\react-redux-todo-list-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"C:\\\\Users\\\\gabtn\\\\OneDrive\\\\Bureau\\\\react-redux-todo-list-master\\\\react-redux-todo-list-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\nvar tasks = function tasks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_ITEMS\":\n      return [].concat(_toConsumableArray(state), [{\n        id: action.id,\n        text: action.text,\n        completed: false\n      }]);\n\n    case \"UPDATE_ITEM\":\n      return state.map(function (item) {\n        return item.id === action.id ? _objectSpread({}, item, {\n          completed: !item.completed\n        }) : item;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default tasks;","map":{"version":3,"sources":["C:/Users/gabtn/OneDrive/Bureau/react-redux-todo-list-master/react-redux-todo-list-master/src/reducers/items.js"],"names":["tasks","state","action","type","id","text","completed","map","item"],"mappings":";;;AAAA,IAAMA,KAAK,GAAG,SAARA,KAAQ,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACpC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,0CACKF,KADL,IAEE;AACEG,QAAAA,EAAE,EAAEF,MAAM,CAACE,EADb;AAEEC,QAAAA,IAAI,EAAEH,MAAM,CAACG,IAFf;AAGEC,QAAAA,SAAS,EAAE;AAHb,OAFF;;AAQF,SAAK,aAAL;AACE,aAAOL,KAAK,CAACM,GAAN,CAAU,UAACC,IAAD;AAAA,eACfA,IAAI,CAACJ,EAAL,KAAYF,MAAM,CAACE,EAAnB,qBAA6BI,IAA7B;AAAmCF,UAAAA,SAAS,EAAE,CAACE,IAAI,CAACF;AAApD,aAAkEE,IADnD;AAAA,OAAV,CAAP;;AAGF;AACE,aAAOP,KAAP;AAfJ;AAiBD,CAlBD;;AAoBA,eAAeD,KAAf","sourcesContent":["const tasks = (state = [], action) => {\n  switch (action.type) {\n    case \"ADD_ITEMS\":\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false,\n        },\n      ];\n    case \"UPDATE_ITEM\":\n      return state.map((item) =>\n        item.id === action.id ? { ...item, completed: !item.completed } : item\n      );\n    default:\n      return state;\n  }\n};\n\nexport default tasks;\n"]},"metadata":{},"sourceType":"module"}